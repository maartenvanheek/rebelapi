@dash: gray;
@black: black;
@text: black;
@edgeNode: white;
@background: white;
@external: lightgray;
@graphTitle: black;
@fieldsBox: lightgray;
@fieldsText: black;
@uncertain: magenta;
@uncertain2: yellow;

//new additions
@previousPath: blue;

@newNode: white;
@currentNode: lightgreen;
@previousNode: orange;

//html,body {
//    /*font: 300 14px 'Helvetica Neue', Helvetica;*/
//    font-family: 'lucida sans', 'trebuchet MS', 'Tahoma';
//}

.node{
    font-size: large;
}

.cluster rect {
    //main graph rectangle box (ex external components)
    fill: @background;
    stroke: @black;
}

.cluster{
    //??
    color: @uncertain;
}

.cluster .label div {
    padding: 10px 0;
}

.label {
    // ??
    color: @uncertain;
    margin: 10px 0;
    text-align: center;
    min-height: 100px;
}

.label p {
    // text of <referenced by> label
    color: @text;
    font-size: large;
}


//.node.fields.hide {
// not used in ng visualisation?
//    display: none;
//}

.node.fields rect {
    fill: @fieldsBox;
}

.node.fields .label {
    color: @fieldsText;
    font-weight: normal;
    text-align: left;
}


.node.fields table th {
    font-weight: bold;
    text-align: left;
    padding-bottom: -5px;
}

.node rect {
    // this fills some external field rectangle AFAIK
    stroke: @black;
    fill: @uncertain2;
    rx: 10;
    ry: 10;
}

.node.edgeNode rect {
    fill: @edgeNode;
    stroke: none;
}

.node.stateNode circle {
  fill: @newNode;
  stroke: @black;
}

.node.currentNode circle {
  fill: @currentNode;
  stroke: @black;
}
.node.previousNode circle {
  fill: @previousNode;
}

//.node.initial circle {
// not used?
//}
//
//.node.initial text {
//    font-size: 0;
//}

// pretty sure that these are handled by js (if at all present)
//.node.accepting circle {
//    fill: @uncertain;
//    margin: 2px;
//    border: 1px solid #000;
//    r: 8;
//}
//
//.node.accepting text {
//    font-size: 0;
//}

.node.externalMachine rect {
    fill: @external;
}

.node.externalMachine.in rect {
    fill: @external;
}

.node .label {
    margin: 10px 0;
    text-align: center;
}

.node .label p {
    font-size: 0.7em;
}
/*ok ...*/
.label span.extendedBy {
    // graph label (top center)
    color: @text;
    display: block;
    font-size: medium;
}

.label span.inheritsFrom {
    // graph title 'inherits from'
    color: @text;
    display: block;
    font-size: medium;
}

.label em{
    // graph title (top center)
    font-size: large;
    color: @graphTitle;
}

.node.externalMachine .label p {
    font-size: 0.7em;
}

.edgePath path {
    stroke: @black;
    //fill: #000; // superfluous?
    stroke-width: 1.5px;
}

.edgePath.syncTo path {
    stroke-dasharray: 5, 5;
    stroke-width: 1.5px;
    stroke: @dash;
    //fill: @black //??
}

.edgePath.syncFrom path {
    stroke-dasharray: 20, 20;
    stroke-width: 1.5px;
    stroke: @dash;
    //fill: @black
}
//
//.edgePath.hide path {
//    display: none;
//}
//
//.node.externalMachine.hide {
//    display: none;
//}

.edgePath.specialisation path {
    stroke-dasharray: 5, 5;
    stroke-width: 1.5px;
    stroke: @uncertain;
    /*fill: #aaa*/
}


.arrowhead {
  stroke: @previousPath;
  fill: @previousPath;
}

.edgePath.previous path {
    stroke: @previousPath;
    fill: none;
    stroke-width: 3px;
}
